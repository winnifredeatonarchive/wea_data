<?xml version="1.0" encoding="UTF-8"?>
<project name="Build Site" default="all">
  
  
  <include file="../buildGlobals.xml"/>

    
    <target name="init">
        <delete dir="${products.dir}"/>
        <mkdir dir="${site.dir}"/>
        <mkdir dir="${site.dir}/xml"/>
    </target>
    
    <target name="copyCSS">
        <!--First, use sass to minify the CSS files
            (and to prep for sass in future)-->
        <copy todir="${site.dir}/sass">
            <fileset dir="../site/sass">
                <include name="**.scss"/>
            </fileset>
        </copy>
        <exec executable="sass">
            <arg line="${site.dir}/sass:${site.dir}/css --style compressed"/>
        </exec>
        <!--And copy the fonts-->
        <copy todir="${site.dir}/fonts">
            <fileset dir="../site/fonts">
                <include name="**"/>
            </fileset>
        </copy>
    </target>
    
 
    <target name="copyJS">
        <!--Then already minified javascript
            is just copied-->
        <copy todir="${site.dir}/js">
            <fileset dir="../site/js">
                <include name="**.min.js"/>
            </fileset>
        </copy>
        
        <!--Now use the closure compiler-->
        <apply executable="java" append="false" parallel="false" force="true">
            <arg line="-jar ${lib.dir}/closure-compiler.jar"/>
            <arg line="--warning_level QUIET"/>
            <arg value="--js"/>
            <srcfile/>
            <arg value="--js_output_file"/>
            <targetfile/>
            <fileset dir="../site">
                <include name="**/**.js"/>
                <exclude name="**/**.min.js"/>
            </fileset>
            <globmapper from="*" to="${products.dir}/site/*"/>
        </apply>
    </target>
    
    <target name="copyImages">
        <copy todir="${site.dir}/images">
            <fileset dir="../data/images">
                <include name="**"/>
            </fileset>
        </copy>
        <copy todir="${site.dir}/media">
            <fileset dir="../data/media">
                <include name="**"/>
            </fileset>
        </copy>
        <copy todir="${site.dir}/facsimiles">
            <fileset dir="../data/facsimiles">
                <include name="**"/>
            </fileset>
        </copy>
    </target>
    
    
    <target name="copySchema">
        <copy todir="${site.dir}/xml/sch">
            <fileset dir="../data/sch">
                <include name="**"/>
            </fileset>
        </copy>
    </target>
    
    <target name="copyAuxFiles" depends="copyCSS, copyJS, copyImages, copySchema"/>

    <target name="processPDFs">        
        <foreach target="convertPDF" param="pdf" parallel="true">
            <path>
                <fileset dir="${site.dir}/facsimiles">
                    <include name="**.pdf"/>
                </fileset>
            </path>
        </foreach>
    </target>
    
    <target name="convertPDF">
        <!--First split into multiple PDFs-->
        <basename property="base" file="${pdf}" suffix=".pdf"/>
        <!--Now create the thumbnails-->
        <exec executable="vipsthumbnail">
            <arg line="${pdf} -o ${site.dir}/facsimiles/${base}.jpg --size x600"/>
        </exec>
        <exec executable="vipsthumbnail">
            <arg line="${site.dir}/facsimiles/${base}.jpg -o ${site.dir}/facsimiles/${base}_tiny.jpg --size x300"/>
        </exec>
        
    </target>
   
    <target name="processMedia">
        
        <echo message="Creating small JPGs from large media files for display across the site..."/>
        <delete dir="${site.dir}/media/small"/>
        <mkdir dir="${site.dir}/media/small"/>
        
        
        <fileset dir="${site.dir}/media" id="mediaFileset">
            <include name="**"/>
            <exclude name="**.pdf"/>
        </fileset>
        

        <!--First make small copies-->
        <apply executable="vipsthumbnail" outputproperty="nonce">
            <srcfile/>
            <arg line="--size 10000x600"/>
            <arg line="-o small/%s.jpg"/>
            <fileset refid="mediaFileset"/>
            
        </apply>

    </target>

 
 
 <target name="createSourceXml">
     <echo message="Creating source XML..."/>
     <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true"  fork="true">
         <arg value="-xsl:${project.dir}/code/xsl/xml_source_master.xsl"/>
         <arg value="-it:go"/>
         <arg value="projectDir=${project.dir}"/>
         <arg value="outDir=${site.dir}"/>
         <arg value="docsToBuild=${docsToBuild}"/>
         <arg value="version=${version}"/>
         <arg value="--suppressXsltNamespaceCheck:on"/>          
     </java>
 </target>
    
    
    
  <target name="createOriginalXml">
      <echo message="Creating site..."/>
      <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true"  fork="true">
          <arg value="-xsl:${project.dir}/code/xsl/xml_original_master.xsl"/>
          <arg value="-s:${project.dir}/code/xsl/xml_original_master.xsl"/>
          <arg value="outDir=${site.dir}"/>
          <arg value="docsToBuild=${docsToBuild}"/>
          <arg value="version=${version}"/>
          <arg value="--suppressXsltNamespaceCheck:on"/>          
      </java>
  </target>
    
    <target name="validateOriginalXml">
        <ant antfile="buildValidate.xml" inheritall="no">
            <property name="fileset" value="originalXml"/>
            <property name="data.dir" value="${site.dir}/xml/original"/>
        </ant>
    </target>
    
    <target name="createIndex">
        <echo message="Creating index..."/>
        <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" fork="true">
            <arg value="-xsl:${project.dir}/code/xsl/xml_index_master.xsl"/>
            <arg value="-s:${project.dir}/code/xsl/xml_index_master.xsl"/>
            <arg value="outDir=${site.dir}"/>
            <arg value="docsToBuild=${docsToBuild}"/>
            <arg value="version=${version}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
 <target name="createStandaloneXml">
     <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" fork="true">
         <arg value="-xsl:${project.dir}/code/xsl/xml_standalone_master.xsl"/>
         <arg value="-s:${project.dir}/code/xsl/xml_standalone_master.xsl"/>
         <arg value="outDir=${site.dir}"/>
         <arg value="docsToBuild=${docsToBuild}"/>
         <arg value="version=${version}"/>
         <arg value="--suppressXsltNamespaceCheck:on"/>
     </java>
 </target>
    
 <!--   <target name="validateStandaloneXml">
        <ant antfile="buildValidate.xml" inheritall="no">
            <property name="data.dir" value="${site.dir}/xml/standalone"/>
            <property name="fileset" value="standaloneXml"/>
            <property name="rng" value="${sch.dir}/tei_all.rng"/>
            <property name="sch" value="${sch.dir}/tei_all.sch"/>
            <property name="sch.xsl" value="${sch.dir}/tei_all.xsl"/>
        </ant>
    </target>-->
    
    
  
  
    <target name="weighSite">
        <description>This target creates files that describe each and every output file (other than the HTML).</description>
        <delete dir="${site.dir}/info"/>
        <mkdir dir="${site.dir}/info"/>
        <apply executable="du" dir="${site.dir}" output="${site.dir}/info/sizes.txt" append="true">
            <arg line="-sh"/>
            <fileset dir="${site.dir}">
                <include name="**/**"/>
            </fileset>
        </apply>


        <apply executable="file" dir="${site.dir}" output="${site.dir}/info/images.txt" append="true">
            <fileset dir="${site.dir}">
                <include name="**/**.png"/>
                <include name="**/**.pdf"/>
                <include name="**/**.jpg"/>
                <include name="**/**.jpeg"/>
                <include name="**/**.tiff"/>
                <include name="**/**.tif"/>
            </fileset>
        </apply>
        
        <echo file="${site.dir}/info/dataList.txt" message="${dataList}"/>
        
    </target>
    
 
    
    
  <target name="createXhtml">
      <echo message="Creating site..."/>
      <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" fork="true">
          <arg value="-xsl:${project.dir}/code/xsl/xhtml_master.xsl"/>
          <arg value="-s:${project.dir}/code/xsl/xhtml_master.xsl"/>
          <arg value="outDir=${site.dir}"/>
          <arg value="docsToBuild=${docsToBuild}"/>
          <arg value="version=${version}"/>
          <arg value="--suppressXsltNamespaceCheck:on"/>
          
      </java>
  </target>
    
  
 
    
    <target name="validateXhtml">
        <description>
            This target validates the XHTML against the VNU validator.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Validating XHTML..."/>
        <echo message="${echo.separator}"/>
        <apply executable="java" failonerror="true" parallel="true">
            <arg line="-jar ${lib.dir}/vnu/vnu.jar 
                --format gnu
                --skip-non-html
                --errors-only
                -Dnu.validator.client.content-type=application/xhtml+xml"/>
            <fileset dir="${site.dir}">
                <include name="*.html"/>
            </fileset>
        </apply>
       
    </target>
    
    <target name="createDocDetails">
        <java classpath="${saxon}" classname="net.sf.saxon.Transform" failonerror="true" fork="true">
            <arg value="-xsl:${project.dir}/code/xsl/ss_create_doc_info.xsl"/>
            <arg value="-s:${project.dir}/code/xsl/ss_create_doc_info.xsl"/>
            <arg value="outDir=${site.dir}"/>
            <arg value="docsToBuild=${docsToBuild}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
            
        </java>
    </target>
    
    <target name="createEncodingPackage">
        <delete file="${site.dir}/encoding_package.zip"/>
        <zip destfile="${site.dir}/encoding_package.zip">
            <fileset dir="${project.dir}">
                <include name="data/sch/**"/>
                <include name="data/wea_data.xpr"/>
                <!--Exclude all of the TEI schemas-->
                <exclude name="data/sch/tei*"/>
            </fileset>
            <mappedresources>
                <fileset dir="${project.dir}">
                    <include name="site/js/encoding_package_readme.txt"/> 
                </fileset>
                <globmapper from="site/js/*" to="README.txt"/>
            </mappedresources>
        </zip>
    </target>
    
   
   
    
  
  <target name="quick" depends="copyAuxFiles, createSourceXml, createOriginalXml, createIndex, createStandaloneXml, createXhtml, createEncodingPackage"/>
    
    <target name="fast" depends="createSourceXml, createOriginalXml, createIndex, createStandaloneXml, createXhtml"/>
    
    <target name="quickWithFacs" depends="copyAuxFiles, processPDFs, processMedia, createSourceXml, createOriginalXml, createIndex, createStandaloneXml, weighSite, createXhtml"/>
    
    <target name="all" depends="init, copyAuxFiles, processPDFs, processMedia, createSourceXml, createOriginalXml, validateOriginalXml, createIndex, createStandaloneXml, weighSite, createXhtml, validateXhtml, createDocDetails, createEncodingPackage"/>
    
    <target name="justXml" depends="copyAuxFiles, createSourceXml, createOriginalXml, validateOriginalXml, createIndex, createStandaloneXml, weighSite, createXhtml, validateXhtml"/>
        
      
    
</project>