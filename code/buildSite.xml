<?xml version="1.0" encoding="UTF-8"?>
<project name="Build Site" default="all">
  
  
  <include file="../buildGlobals.xml"/>
    
    
    
    
    <target name="init">
        <delete dir="${products.dir}"/>
        <mkdir dir="${site.dir}"/>
    </target>
    
    <target name="copyAuxFiles">
        <copy todir="${site.dir}">
            <fileset dir="../site">
                <include name="**/**"/>
            </fileset>
        </copy>
        <copy todir="${site.dir}/images">
            <fileset dir="../data/images">
                <include name="**"/>
            </fileset>
        </copy>
        <copy todir="${site.dir}/media">
            <fileset dir="../data/media">
                <include name="**"/>
            </fileset>
        </copy>
        <copy todir="${site.dir}/facsimiles">
            <fileset dir="../data/facsimiles">
                <include name="**"/>
            </fileset>
        </copy>
    </target>
    
    
    <target name="createThumbnails">
        <echo message="Creating x600 thumbnails from facsimiles..."/>
        <exec executable="/bin/bash" dir="${site.dir}/facsimiles" failonerror="true">
            <arg line="${project.dir}/code/thumbnail.sh pdf 600 [page=0]"/>
        </exec>
        <echo message="Creating x300 thumbnails from facsimiles..."/>
        <exec executable="/bin/bash" dir="${site.dir}/facsimiles"  failonerror="true">
            <arg line="${project.dir}/code/thumbnail.sh pdf 300 [page=0] _tiny"/>
        </exec>
        <echo message="Creating x600 thumbnails from pngs..."/>
        <exec executable="/bin/bash" dir="${site.dir}/media"  failonerror="true">
            <arg line="${project.dir}/code/thumbnail.sh png 600 '' _sm "/>
        </exec>
        <exec executable="/bin/bash" dir="${site.dir}/media" failonerror="true">
            <arg line="${project.dir}/code/thumbnail.sh pdf 600 [page=0] _sm "/>
        </exec>
    </target>
    
    <!--<target name="createPDFThumbnails">
        <echo message="${echo.separator}"/>
        <echo message="Creating PDF thumbnails..."/>
        <echo message="${echo.separator}"/>
        <foreach target="convertPDF" parallel="true" param="pdf">
            <path>
                <fileset dir="${site.dir}/facsimiles">
                    <include name="**.pdf"/>
                </fileset>
            </path>
        </foreach>
        
    </target>
    
    <target name="convertPDF">

        <propertyregex property="out" input="${pdf}" regexp="(.+)\.pdf" select="\1.png"/>
        <echo message="${echo.separator}"/>
        <echo message="Converting ${pdf} to ${out}..."/>
        <echo message="${echo.separator}"/>
        <exec executable="convert" failonerror="true">
            <arg line="-density 150 -thumbnail x600"/>
            <arg line="${pdf}[0]"/>
            <arg line="+profile 'icc'"/>
            <arg line="-background white -alpha remove -alpha off"/>
            <arg line="${out}"/>
        </exec>
    </target>
    
    <target name="createTinyThumbnails">
        <echo message="${echo.separator}"/>
        <echo message="Creating even tinier thumbnails..."/>
        <echo message="${echo.separator}"/>
        <apply executable="convert" dest="${site.dir}/facsimiles" force="true" failonerror="true">
            <arg line="-density 150 -thumbnail x300"/>
            <srcfile/>
            <targetfile/>
            <fileset dir="${site.dir}/facsimiles">
                <include name="**.png"/>
            </fileset>
            <mapper>
                <globmapper from="*.png" to="*_tiny.png"/>
            </mapper>
        </apply>
    </target>
    
    <target name="createSmallerImages">
        
        <echo message="Creating smaller PNGs from PNGS"/>
        <apply executable="convert" dest="${site.dir}/media" force="true" failonerror="true" verbose="true">
            <arg line="-density 150 -thumbnail x600"/>
            <srcfile/>
            <targetfile/>
            <fileset dir="${site.dir}/media">
                <include name="**.png"/>
            </fileset>
            <mapper>
                <globmapper from="*.png" to="*_sm.png"/>
            </mapper>
        </apply>
        <echo message="Creating small PNGs from PDFs"/>
        <apply executable="convert" dest="${site.dir}/media" force="true" failonerror="true" verbose="true">
            <arg line="-density 150 -thumbnail x600"/>
            <srcfile suffix="[0]"/>
            <arg line="+profile 'icc'"/>
            <arg line="-background white -alpha remove -alpha off"/>
            <targetfile/>
            <fileset dir="${site.dir}/media">
                <include name="**.pdf"/>
            </fileset>
            <mapper>
                <globmapper from="*.pdf" to="*_sm.png"/>
            </mapper>
        </apply>
    </target>
    -->
    
 
 
 <target name="createSourceXml">
     <echo message="Creating source XML..."/>
     <copy todir="${source.xml.dir}">
         <fileset dir="${data.dir}">
             <include name="**/**.xml"/>
             <exclude name="documentation/**.xml"/>
         </fileset>
     </copy>
 </target>
    
    
    
  <target name="createOriginalXml">
      <echo message="Creating site..."/>
      <java classpath="../lib/saxon9he.jar" classname="net.sf.saxon.Transform" >
          <arg value="-xsl:${project.dir}/code/xsl/xml_original_master.xsl"/>
          <arg value="-s:${project.dir}/code/xsl/xml_original_master.xsl"/>
          <arg value="outDir=${site.dir}"/>
          <arg value="docsToBuild=${docsToBuild}"/>
          <arg value="--suppressXsltNamespaceCheck:on"/>          
      </java>
  </target>  
    
    <target name="validateOriginalXml">
        <ant antfile="buildValidate.xml" inheritall="no">
            <property name="data.dir" value="${site.dir}/xml/original"/>
        </ant>
    </target>
    
    <target name="createIndex">
        <echo message="Creating index..."/>
        <java classpath="../lib/saxon9he.jar" classname="net.sf.saxon.Transform" failonerror="true" >
            <arg value="-xsl:${project.dir}/code/xsl/xml_index_master.xsl"/>
            <arg value="-s:${project.dir}/code/xsl/xml_index_master.xsl"/>
            <arg value="outDir=${site.dir}"/>
            <arg value="docsToBuild=${docsToBuild}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
 <target name="createStandaloneXml">
     <java classpath="../lib/saxon9he.jar" classname="net.sf.saxon.Transform" failonerror="true" >
         <arg value="-xsl:${project.dir}/code/xsl/xml_standalone_master.xsl"/>
         <arg value="-s:${project.dir}/code/xsl/xml_standalone_master.xsl"/>
         <arg value="outDir=${site.dir}"/>
         <arg value="docsToBuild=${docsToBuild}"/>
         <arg value="--suppressXsltNamespaceCheck:on"/>
     </java>
 </target>
    
    <target name="validateStandaloneXml">
        <ant antfile="buildValidate.xml" inheritall="no">
            <property name="data.dir" value="${site.dir}/xml/standalone"/>
            <property name="rng" value="${project.dir}/sch/tei_all.rng"/>
            <property name="sch" value="${project.dir}/sch/tei_all.sch"/>
            <property name="sch.xsl" value="${project.dir}/sch/tei_all.xsl"/>
        </ant>
    </target>
    
    
  
  
    <target name="weighSite">
        <description>This target creates files that describe each and every output file (other than the HTML).</description>
        <mkdir dir="${site.dir}/info"/>
        <apply executable="du" dir="${site.dir}" output="${site.dir}/info/sizes.txt" append="true">
            <arg line="-sh"/>
            <fileset dir="${site.dir}">
                <include name="**/**"/>
            </fileset>
        </apply>

        <apply executable="file" dir="${site.dir}" output="${site.dir}/info/images.txt" append="true">
            <fileset dir="${site.dir}">
                <include name="**/**.png"/>
                <include name="**/**.pdf"/>
                <include name="**/**.jpg"/>
                <include name="**/**.jpeg"/>
                <include name="**/**.tiff"/>
                <include name="**/**.tif"/>
            </fileset>
        </apply>
        <loadfile srcfile="${site.dir}/info/images.txt" property="images"/>
        <echo message="${images}"/>
        
    </target>
    
    
  <target name="createXhtml">
      <echo message="Creating site..."/>
      <java classpath="../lib/saxon9he.jar" classname="net.sf.saxon.Transform" failonerror="true"  >
          <arg value="-xsl:${project.dir}/code/xsl/xhtml_master.xsl"/>
          <arg value="-s:${project.dir}/code/xsl/xhtml_master.xsl"/>
          <arg value="outDir=${site.dir}"/>
          <arg value="docsToBuild=${docsToBuild}"/>
          <arg value="--suppressXsltNamespaceCheck:on"/>
          
      </java>
  </target>
    
  
 
    
    <target name="validateXhtml">
        <description>
            This target validates the XHTML against the VNU validator.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Validating XHTML..."/>
        <echo message="${echo.separator}"/>
        <mkdir dir="${xh.validation.dir}"/>
        <copy todir="${xh.validation.dir}">
            <fileset dir="${site.dir}">
                <include name="*.html"/>
            </fileset>
        </copy>
        <java jar="${project.dir}/lib/vnu/vnu.jar" failonerror="false" fork="true">
            <arg value="-Dnu.validator.client.content-type=application/xhtml+xml"/>
            <arg value="--format text"/>
            <arg value="--skip-non-html"/>
            <arg value="${xh.validation.dir}/"/>
        </java>
        <delete dir="${xh.validation.dir}"/>
    </target>
    
   
    
  
  <target name="quick" depends="copyAuxFiles, createSourceXml, createOriginalXml, createIndex, createStandaloneXml, createXhtml"/>
    
    <target name="quickWithFacs" depends="copyAuxFiles, createThumbnails, createSourceXml, createOriginalXml, createIndex, createStandaloneXml, weighSite, createXhtml"/>
    
    <target name="all" depends="init, copyAuxFiles, createThumbnails, createSourceXml, createOriginalXml, validateOriginalXml, createIndex, createStandaloneXml, validateStandaloneXml, weighSite, createXhtml, validateXhtml "/>
    
      
    
</project>