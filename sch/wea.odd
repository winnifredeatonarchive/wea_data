<?xml version="1.0" encoding="UTF-8"?>
<!--Processing instructions for the TEI ODDs rng-->
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns="http://www.tei-c.org/ns/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>ODD Customization for the Winniferd Eaton Archive Project</title>
        <respStmt>
          <resp>Author</resp>
          <name>Joey Takeda</name>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <p>Open access?</p>
      </publicationStmt>
      <sourceDesc>
        <p>Born digital.</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>

      <div>
        <head>Introduction</head>
        <p>The following are the Guidelines and schema specification for the Winnifred Eaton Archive project (WEA). The project
        uses a highly constrained version of the TEI Guidelines; the texts are lightly encoded with very little linked data. Primarily,
        the texts are meant to be easily ported into an existing Omeka framework; the details of this framework are still in development.</p>
      </div>
      <div>
        <head>Requirements</head>
        <p>To edit material for the site, you will need to use a computer with the following software:
        <list>
          <item>Git (to get data from and commit data to  the repository). Most computers come with git automatically installed. To check this, open the Command Line (Windows) / Terminal (Mac/Linux) and type in <code rend="block">git --version</code>. If you get something like this in response: <code rend="block">git version 2.17.2 (Apple Git-113)</code>, then you have Git installed. Otherwise, follow the instructions <ref target="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">here</ref>.</item>
          <item>oXygen XML Editor. (For current RAs, talk to Mary Chapman about licensing.)</item>
          <item>You must also set up a free Github account <ref target="https://github.com/">here</ref>. It will be connected to your email address; once the Github account is set up, let the repository owner (currently Joey Takeda) know the email address used so that they can grant you write access to the repository.</item>
        </list>
        </p>
      </div>

      <div xml:id="github">
        <head>Using Github</head>
        <p>All of the data for the project is kept in a Git repository that is hosted through Github. Git is a version control system, which means that one could "roll back" the site to any particular version, and retrieve any file at any state of editing. Note that Github is a public repository, so all of the data and commit messages you make are visible to anyone. Our Github repository URL is <ref target="https://github.com/winnifredeatonarchive/wea_data">https://github.com/winnifredeatonarchive/wea_data</ref>.</p>
        <p></p>
        <div xml:id="github_get">
          <head>Setting up the repository</head>
          <p>To get the data, you must first checkout a copy of the repository as follows:</p>
          <list>
            <item>Open the terminal</item>
            <item>Create a directory for working in: <code rend="block">mkdir wea</code>

            </item>
            <item>Go into the directory: <code rend="block">cd wea</code>
            </item>
            <item>Initialize the repository: <code rend="block">git init .</code></item>
            <figure>
              <graphic url="../graphics/git_checkout_1.gif"/>
            </figure>
            <item>Pull the repository: <code rend="block">git pull https://github.com/winnifredeatonarchive/wea_data</code></item>
            <figure>
              <graphic url="../graphics/git_checkout_2.gif"/>
            </figure>
          </list>
          <p>Note that you only need to do this the first time you start working in the Github repository.</p>
        </div>
        
        <div>
          <head>The Github Workflow</head>
          <p>The normal workflow for working in Github (and any version software) is as follows:
          <list>
            <item>Update your repository so that any changes made by others are pushed into your local system</item>
            <item>Commit the items to the repository</item>
            <item>Push those items to the Github interface</item>
          </list>
          </p>
          <div>
            <head>Updating</head>
            <p>Make sure to update as often as possible; always update at the beginning of your working session. </p>
            <p>To update:
            <list>
              <item>Go into your working folder: 
                <code rend="block">cd wea</code>
              </item>
              <item>Pull the repository:
              <code rend="block">git pull</code>
              </item>
               <figure>
                 <graphic url="../graphic/git_pull_1.gif"/>
               </figure>
            </list>
            </p>
          </div>
          <div>
            <head>Committing</head>
            <p>Unlike some versioning systems, Github requires three steps for committing/saving your work to the repository.
            <list>
              <item>First, check the status of your files to see what you have changed since your last commit:
              <code rend="block">git status</code>
              If there are no changes to the repository, then you'll like see something like this:
              <code rend="block">
                On branch master
                nothing to commit, working tree clean
              </code>
              If there are changes, you should see something like this:
              
              <code rend="block">
                On branch master
                Changes not staged for commit:
                (use "git add &lt;file&gt;..." to update what will be committed)
                (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
                
                modified:   README.md
                
                no changes added to commit (use "git add" and/or "git commit -a")
              </code>
              </item>
              <figure>
                <graphic url="../graphics/git_status_1.gif"/>
              </figure>
              <item>If there are changes, then add the files/folders that you want to commit to the repository.
              <code rend="block">git add README.md</code>
              </item>
              <figure>
                <graphic url="../graphics/git_add_1.gif"/>
              </figure>
              <item>Third, commit the files to the repository, including a commit message that explains what you did:
              <code rend="block">git commit -m "Encoding a new poem."</code>
              </item>
              <figure>
                <graphic url="../graphics/git_commit_1.gif"/>
              </figure>
              <item>Fourth, push the files to the repository:
              <code rend="block">git push</code>
                <figure>
                  <graphic url="../graphics/git_push_first_1.gif"/>
                </figure>
              Note that, if you are committing for the first time, you'll like see something like this:
              <code rend="block">
                Either specify the URL from the command-line or configure a remote repository using
                
                git remote add &lt;name&gt; &lt;url&gt;
                
                and then push using the remote name
                
                git push &lt;name&gt;
              </code>

              This means that you must set up your local copy to track the changes in the global repository. To do that, simply follow the above instructions like so:
                <code rend="block">git remote add wea https://github.com/winnifredeatonarchive/wea_data</code>
                <code rend="block">git push wea</code>
                <figure>
                  <graphic url="../graphics/git_remote_add_1.gif"/>
                </figure>
                You'll then like get another message, saying something like:
                <code rend="block">fatal: The current branch master has no upstream branch.
                  To push the current branch and set the remote as upstream, use
                  
                  git push --set-upstream wea master
                  
                </code>
                To resolve that, simply:
                <code rend="block">
                  git push --set-upstream wea master
                </code>
                <figure>
                  <graphic url="../graphics/git_push_2.gif"/>
                </figure>
                You may then be prompted for your username and password; if this is your first commit, then it might give your instructions on how to store those credentials in your local git system so that you do not need to add your username and password every time you commit.
              </item>
            </list>
            </p>
          </div>
        </div>
        
      </div>
      
      <div>
        <head>Creating a New Text in oXygen</head>
        <p>To create a new text file, use the built in text template</p>
        <list>
          <item>First, in the project view in oXygen, right click the data/texts folder and click "Add new file"</item>
          <figure>
            <graphic url="../graphics/create_new_file_1.gif"/>
          </figure>
          <item>Select "wea_template.xml" and give your file a name. The name should be two or three words, separated with underscores.</item>
          <figure>
            <graphic url="../graphics/create_new_file_2.gif"/>
          </figure>
          <item>Answer the prompts, filling in the (modernized) title of the text and your @<att>xml:id</att>.</item>
          <figure>
            <graphic url="../graphics/create_new_file_3.gif"/>
          </figure>
          <item>Fill in any information--including who transcribed the file and who copy-edited the file--in the teiHeader.</item>
          <figure>
            <graphic url="../graphics/create_new_file_4.gif"/>
          </figure>
        </list>
        
      </div>
      
      <div>
        <head>Building the Schema</head>
        <p>All constraints and documentation are contained within the ODD file, including the RelaxNG schema, the schematron file, and the compiled schematron XSLT.</p>
        <p>To regenerate the schema and the documentation follow these directions</p>
        <p><emph>In oXygen</emph>: Simply open the ODD file in the oXygen project file and press the red "play" button.</p>
        <p><emph>Command line</emph>: in the root project directory (<code>wea_data</code>), run:
          <code rend="block">ant -lib lib -f code/buildSchemas.xml</code>
          Note that you must have ant installed.
        </p>
      </div>

    </body>
    <back>
      <div>
        <schemaSpec ident="wea" start="TEI">
          <moduleRef key="analysis" include="pc"/>
          
          <moduleRef key="core" include="author bibl choice corr date editor emph foreign gap head hi item l lb lg list listBibl milestone name note num orig p pb pubPlace publisher q quote ref reg relatedItem resp respStmt sic term title unclear"/>
          <moduleRef key="header" include="abstract authority availability biblFull catRef category change creation distributor edition editionStmt editorialDecl encodingDesc fileDesc hyphenation idno keywords langUsage language licence listChange listPrefixDef notesStmt prefixDef profileDesc projectDesc publicationStmt rendition revisionDesc seriesStmt sourceDesc teiHeader textClass titleStmt"/>
          <moduleRef key="tagdocs" include="att code gi val"/>
          <!--Include all TEI modules-->
          <moduleRef key="tei"/>
          
          <moduleRef key="textstructure" include="TEI back body byline closer dateline div docAuthor docDate docTitle epigraph front opener text titlePage titlePart trailer"/>
          
          <moduleRef key="transcr" include="supplied"/>
          
          <!--VARIABLES-->
          
          <constraintSpec ident="global.variables" scheme="schematron">
            <constraint>
              
              <sch:pattern>
                <sch:let name="spaceRegex" value="'(^\s)|(\s$)'"/>
                <sch:let name="docId" value="root(/)/tei:*/@xml:id"/>
                <sch:let name="docUri" value="document-uri(/)"/>
                <sch:let name="docIds" value="//tei:*[@xml:id]/@xml:id"/>
              </sch:pattern>
            </constraint>
          </constraintSpec>
          
          <!--Basic constraints-->
          <constraintSpec scheme="schematron" ident="TEI.docNameSameAsId">
            <desc>All root elements must have an <att>xml:id</att> that matches the document filename.</desc>
            <constraint>
              <sch:pattern>
                <sch:rule context="/tei:TEI[not(ancestor::tei:teiCorpus)] | /tei:teiCorpus">
                  <sch:assert test="@xml:id and matches($docUri,concat('[/\\]',$docId,'.xm[l_]$'))"> ERROR: Document
                    xml:id (<sch:value-of select="$docId"/>) does not match the document file
                    name (<sch:value-of select="$docUri"/>). </sch:assert>
                </sch:rule>
              </sch:pattern>
            </constraint>
          </constraintSpec>
        </schemaSpec>
      </div>
     
    </back>
  </text>
</TEI>
