<?xml version="1.0" encoding="UTF-8"?>
<!--Processing instructions for the TEI ODDs rng-->
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns:xi="http://www.w3.org/2001/XInclude"
     xmlns:svg="http://www.w3.org/2000/svg"
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     xmlns:math="http://www.w3.org/1998/Math/MathML"
     xmlns:sqf="http://www.schematron-quickfix.com/validator/process"
     xmlns="http://www.tei-c.org/ns/1.0"
     xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>ODD Customization for the Winnifred Eaton Archive Project</title>
            <respStmt>
               <resp>Author</resp>
               <name>Joey Takeda</name>
            </respStmt>
         </titleStmt>
         <publicationStmt>
            <p>Open access?</p>
         </publicationStmt>
         <sourceDesc>
            <p>Born digital.</p>
         </sourceDesc>
      </fileDesc>
  </teiHeader>
  <text>
      <body>

         <div>
            <head>Introduction</head>
            <p>The following are the Guidelines and schema specification for the Winnifred Eaton Archive project (WEA). The project
        uses a highly constrained version of the TEI Guidelines; the texts are lightly encoded with very little linked data. Primarily,
        the texts are meant to be easily ported into an existing Omeka framework; the details of this framework are still in development.</p>
         </div>
         <div>
            <head>Requirements</head>
            <p>To edit material for the site, you will need to use a computer with the following software:
        <list>
                  <item>Git (to get data from and commit data to  the repository). Most computers come with git automatically installed. To check this, open the Command Line (Windows) / Terminal (Mac/Linux) and type in <code rend="block">git --version</code>. If you get something like this in response: <code rend="block">git version 2.17.2 (Apple Git-113)</code>, then you have Git installed. Otherwise, follow the instructions <ref target="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">here</ref>.</item>
                  <item>oXygen XML Editor. (For current RAs, talk to Mary Chapman about licensing.)</item>
                  <item>You must also set up a free Github account <ref target="https://github.com/">here</ref>. It will be connected to your email address; once the Github account is set up, let the repository owner (currently Joey Takeda) know the email address used so that they can grant you write access to the repository.</item>
               </list>
            </p>
         </div>
         <div>
            <head>Site build process</head>
            <p>The WEA follows the Endings principles for digital humanities sustainability; all of the pages are "static," and the site itself has no external or server-side dependencies.</p>
            <p>To build the site, you must have ant installed. In the root directory, run:
            <code rend="block">ant -lib lib</code>
            </p>
            <p>The site build happens in a number of steps:
            <list rend="ordered">
                  <item>All of the source files are validated against the RelaxNG schema and the extracted schematron</item>
                  <item>If all files are valid, then the site build (located in <code>/code/buildSite.xml</code>) is initiated. The crucial steps are as follows:
               <list rend="ordered">
                        <item>Files </item>
                        <item>All of the source XML is flattened into a single directory and massaged slightly to create the "original" XML</item>
                        <item>The standalone XML is created from the original XML; the standalone XML includes all of the "standoff" materials, like people, bibliographic items, and taxonomies referenced in the document. The main point of each standalone file is to include every data point necessary for the site to be taken out of the context of the project and used elsewhere.</item>
                        <item>The XHTML5 pages are created from the standalone XML and then validated against the VNU validator</item>
                     </list>
                  
                  </item>
                  <item>From the site products, we create a search engine, which runs purely using Javascript within the compiled HTML. Each file is tokenized, and each distinct token is stemmed using the Porter Stemmer algorithm. Each distinct stem is created into individual JSON files, which can then be read by the Javascript on the live site. (Note that the search engine is currently experimental and is largely inspired by Martin Holmes' implementation for The John Keats Project and The Robert Graves Diary Project.)</item>
               </list>
            </p>
            <div>
               <head>Current Implementation</head>
               <p>Currently, the site build process is associated with the Continuous Integration service Travis, which triggers the site build with every commit to the the wea_data repository. Travis runs all of the above steps, and then <term>deploys</term> the products to another repository owned by the Winnifred Eaton Archive, currently called "wea." This repository is associated with a Github pages scenario, which allows us to view all changes to the site within minutes of every commit.</p>
               <p>Once we are happy with the products on the "wea" site (also called the "beta" site), those products can then be deployed on another server (currently we use Github pages in another repository, but this will likely change in the future). To be sure, Travis and Github are <emph>not</emph> necessary for the site build, but purely conveniences for the time being and as an experiment to test the feasibility of creating an Endings compliant site with no need for external servers (and thus, theoretically, for free). Currently, the experiment is proving successful.</p>
            </div>
         </div>
         

         <div xml:id="github">
            <head>Using Github</head>
            <p>All of the data for the project is kept in a Git repository that is hosted through Github. Git is a version control system, which means that one could "roll back" the site to any particular version, and retrieve any file at any state of editing. Note that Github is a public repository, so all of the data and commit messages you make are visible to anyone. Our Github repository URL is <ref target="https://github.com/winnifredeatonarchive/wea_data">https://github.com/winnifredeatonarchive/wea_data</ref>.</p>
            <p/>
            <div xml:id="github_get">
               <head>Setting up the repository</head>
               <p>To get the data, you must first checkout a copy of the repository as follows:</p>
               <list>
                  <item>Open the terminal</item>
                  <item>Create a directory for working in: <code rend="block">mkdir wea</code>

                  </item>
                  <item>Go into the directory: <code rend="block">cd wea</code>
                  </item>
                  <item>Initialize the repository: <code rend="block">git init .</code>
                  </item>
                  <figure>
                     <graphic url="../graphics/git_checkout_1.gif"/>
                  </figure>
                  <item>Pull the repository: <code rend="block">git pull https://github.com/winnifredeatonarchive/wea_data</code>
                  </item>
                  <figure>
                     <graphic url="../graphics/git_checkout_2.gif"/>
                  </figure>
               </list>
               <p>Note that you only need to do this the first time you start working in the Github repository.</p>
            </div>
        
            <div>
               <head>The Github Workflow</head>
               <p>The normal workflow for working in Github (and any version software) is as follows:
          <list>
                     <item>Update your repository so that any changes made by others are pushed into your local system</item>
                     <item>Commit the items to the repository</item>
                     <item>Push those items to the Github interface</item>
                  </list>
               </p>
               <div>
                  <head>Updating</head>
                  <p>Make sure to update as often as possible; always update at the beginning of your working session. </p>
                  <list>
                     <item>Go into your working folder: 
                        <code rend="block">cd wea</code>
                     </item>
                     <item>Pull the repository:
                        <code rend="block">git pull</code>
                     </item>
                     <figure>
                        <graphic url="../graphics/git_pull_1.gif"/>
                     </figure>
                  </list>
               </div>
               <div>
                  <head>Committing</head>
                  <p>Unlike some versioning systems, Github requires three steps for committing/saving your work to the repository.
            <list>
                        <item>First, check the status of your files to see what you have changed since your last commit:
              <code rend="block">git status</code>
              If there are no changes to the repository, then you'll like see something like this:
              <code rend="block">
                On branch master
                nothing to commit, working tree clean
              </code>
              If there are changes, you should see something like this:
              
              <code rend="block">
                On branch master
                Changes not staged for commit:
                (use "git add &lt;file&gt;..." to update what will be committed)
                (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
                
                modified:   README.md
                
                no changes added to commit (use "git add" and/or "git commit -a")
              </code>
                        </item>
                        <figure>
                           <graphic url="../graphics/git_status_1.gif"/>
                        </figure>
                        <item>If there are changes, then add the files/folders that you want to commit to the repository.
              <code rend="block">git add data/texts/My_Title.xml</code>
                        </item>
                        <figure>
                           <graphic url="../graphics/git_add_1.gif"/>
                        </figure>
                        <item>Third, commit the files to the repository, including a commit message that explains what you did:
              <code rend="block">git commit -m "Adding new file."</code>
                        </item>
                        <figure>
                           <graphic url="../graphics/git_commit_1.gif"/>
                        </figure>
                        <item>Fourth, push the files to the repository:
              <code rend="block">git push</code>
                           <figure>
                              <graphic url="../graphics/git_push_first_1.gif"/>
                           </figure>
              Note that, if you are committing for the first time, you'll like see something like this:
              <code rend="block">
                Either specify the URL from the command-line or configure a remote repository using
                
                git remote add &lt;name&gt; &lt;url&gt;
                
                and then push using the remote name
                
                git push &lt;name&gt;
              </code>

              This means that you must set up your local copy to track the changes in the global repository. To do that, simply follow the above instructions like so:
                <code rend="block">git remote add wea https://github.com/winnifredeatonarchive/wea_data</code>
                           <code rend="block">git push wea</code>
                           <figure>
                              <graphic url="../graphics/git_remote_add_1.gif"/>
                           </figure>
                You'll then like get another message, saying something like:
                <code rend="block">fatal: The current branch master has no upstream branch.
                  To push the current branch and set the remote as upstream, use
                  
                  git push --set-upstream wea master
                  
                </code>
                To resolve that, simply:
                <code rend="block">
                  git push --set-upstream wea master
                </code>
                           <figure>
                              <graphic url="../graphics/git_push_2.gif"/>
                           </figure>
                You may then be prompted for your username and password; if this is your first commit, then it might give your instructions on how to store those credentials in your local git system so that you do not need to add your username and password every time you commit.
              </item>
                     </list>
                  </p>
               </div>
            </div>
            <div xml:id="github_summary">
               <head>Github Summary</head>
               <p>The basic steps for working with Github are:
                  
                  <list>
                     <item>Open a the Terminal or Command Line (on Mac, use the ⌘ + spacebar and type "Terminal" to find it)</item>
                     <item>Go into your working directory (likely called "wea"):
                        <code rend="block">cd wea</code>
                     </item>
                  </list>
                  Before you start working:
                  <list>
                     <item>Pull the changes from the repository so that your repository is up-to-date:
                        <code rend="block">git pull</code>
                     </item>
                  </list>
                  While you're working:
                  <list>
                     <item>Save your file (using command/ctrl + S like in MS Word)</item>
                     <item>Validate by pressing the red checkmark button in the toolbar in oXygen</item>
                  </list>
                  Once your file is valid and you want to save the file to the repository:
                  <list>
                     <item>Stage your file to be committed:
                        <code rend="block">git add .</code>
                     </item>
                     <item>Commit your changes:
                        <code rend="block">git commit -m</code>
                     </item>
                     <item>Push your changes to the repository:
                        <code rend="block">git push</code>
                     </item>
                  </list>
               </p>
            </div>
         </div>
      
         <div>
            <head>Creating a New Text in oXygen</head>
            <p>To create a new text file, use the built in text template</p>
            <list>
               <item>First, in the project view in oXygen, right click the data/texts folder and click "Add new file"</item>
               <figure>
                  <graphic url="../graphics/create_new_file_1.gif"/>
               </figure>
               <item>Select "wea_template.xml" and give your file a name. The name should be two or three words, separated with underscores.</item>
               <figure>
                  <graphic url="../graphics/create_new_file_2.gif"/>
               </figure>
               <item>Input the (modernized) title of the document</item>
               <figure>
                  <graphic url="../graphics/create_new_file_3.gif"/>
               </figure>
               <item>Select the transciber</item>
               <figure>
                  <graphic url="../graphics/create_new_file_4.gif"/>
               </figure>
               <item>Select the copy editor</item>
               <figure>
                  <graphic url="../graphics/create_new_file_5.gif"/>
               </figure>
               <item>Select the encoder (who is usually you)</item>
               <figure>
                  <graphic url="../graphics/create_new_file_6.gif"/>
               </figure>
               <item>Select the genre</item>
               <figure>
                  <graphic url="../graphics/create_new_file_7.gif"/>
               </figure>
               <item>Select the location (usually derived from the Google Drive folder structure)</item>
               <figure>
                  <graphic url="../graphics/create_new_file_8.gif"/>
               </figure>
               <item>Your new document should be created!</item>
               <figure>
                  <graphic url="../graphics/create_new_file_9.gif"/>
               </figure>
               <item>Remember to commit the changes to the repository using the above instructions.</item>
            </list>
        
         </div>
         
         <div>
            <head>Encoding a Primary Source Document</head>
            <p>Below are abbreviated discussions on how to encode various features of a text</p>
            <div>
               <head>Structure</head>
               <p>All content of the texts goes into the <gi>body</gi> element. Surround all content with a <gi>div</gi> element like so:
               
                  <egXML xmlns="http://www.tei-c.org/ns/Examples">
                     
                     
                     <body>
                        <!--Front matter goes here-->
                        <div>
                           <!--Content goes here-->
                        </div>
                     </body>
                  </egXML>
               </p>
               <p>Individual sections can be encoded using nested <gi>div</gi> tags, if desired:
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                     <body>
                        <head>A Poor Devil</head>
                        <opener>
                           <opener>
                              <byline>By <name ref="pers:WE">Winnie Eaton</name>, Montreal.</byline>
                              <note>[Written for the Metropolitan.]</note>
                           </opener>
                        </opener>
                        <div>
                          
                           <div>
                           <!--Section 1-->
                              <div>
                              <!--Section 1.1-->
                           </div>
                              <div>
                              <!--Section 1.2-->
                           </div>
                           </div>
                           <div>
                           <!--Section 2-->
                        </div>
                        </div>
                     </body>
                  </egXML>
               </p>
            </div>
            <div>
               <head>Associating facsimiles</head>
               <p>All primary source documents should have a related facsimile associated with the document. To do so, simply ensure that the PDF has been added to the <code>data/facsimiles/</code> directory with a filename that follows the rules for filenaming discussed above (no spaces, underscores, et cetera).</p>
               <p>To associate the primary source document with the facsimile, use the <att>facs</att> attribute on the <gi>text</gi> element, with a pointer to the facsimile's file name using the private "facs:" URI scheme:
               
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                     <text facs="facs:Three_Loves_Puritan">
                     <!--Content here-->
                  </text>
                  </egXML>
               </p>
            </div>
            <div>
               <head>Openers and Closers</head>
               <p>Most of the texts have some sort of header or closer with the author's name, date of publication, et cetera. Use the <gi>opener</gi> element if this occurs at the beginning of the text and the <gi>closer</gi> element if it is at the bottom.</p>
            </div>
            <div>
               <head>Bylines</head>
               <p>If there is an authorial statement of responsibility of some sort, enclose this in a <gi>byline</gi> element. Tag Winnifred Eaton's name (in whatever psuedonymic form it appears) with the <gi>name</gi> tag
               with an <att>ref</att> value of <val>pers:WE1</val>.</p>
            </div>
            <div>
               <head>Gaps and omissions</head>
               <p>If the text cannot be transcribed for some reason (damage, etc), then use the <gi>gap</gi> element to signify that there is a gap in transcription:
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                     <gap reason="damaged"/>
                  </egXML>
               </p>
               <p>If you can supply the damaged text, use the <gi>supplied</gi> element instead with an <att>resp</att> value pointing to your <att>xml:id</att> (which is usually your initials):
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                     <supplied resp="pers:JT1">ed</supplied>
                  </egXML>
               </p>
               <p>You can encode how certain you are of your editorial addition by using the <att>cert</att> attribute on supplied with a value of "low" "medium" or "high". If no <att>cert</att> is supplied, it is assumed
               that it has a high value of certainty:
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                     <supplied resp="pers:JT" cert="low">ed</supplied>
                  </egXML>
               </p>
            </div>
            
            <div>
               <head>Quotations</head>
               <p>Currently, we do not distinguish between various types of quotations--direct speech, indirect speech, titles, et cetera. Instead, we simply use the <gi>q</gi> element:
               <specList>
                     <specDesc key="q"/>
                  </specList>
               </p>
               <p>To encode quotations, first follow the quick fixes that are keyed to the body of your document. Right click the <gi>body</gi> element of your file, and you should see a red lightbulb. It should give you options to perform a set of automated fixes for your file.</p>
               
               <div>
                  <head>Block quotations</head>
                  <p>To tag block quotations, simply use the <gi>q</gi> element with a <gi>p</gi> within it. If it's a block quotation that contains verse, for instance, use the <gi>lg</gi> element (or whatever is the most appropriate for the case):
                  <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <q>
                           <lg>
                              <l>The summer days are coming</l>
                              <l>The blossoms deck the bough,</l>
                              <l>The bees are gaily humming</l>
                              <l>And the birds are singing now.</l>
                           </lg>
                        </q>
                     </egXML>
                  </p>
               </div>
               <div>
                  <head>Letters as Quotations and Other Interrupting Texts</head>
                  <p>Often, especially in the novels, letters appear within the regular narrative flow of the text. To handle this, we use the <gi>floatingText</gi> element:
                  <specDesc key="floatingText"/>
                 The <gi>floatingText</gi> element can contain everything a regular <gi>text</gi> element can, and so we can use the appropriate encoding to handle the interrupting texts.
                  </p>
                  <p>Most commonly, <gi>floatingText</gi> will be used in combination with <gi>q</gi> to handle letters. To encode the letters, we use the specific elements for encoding letters per the TEI:
                  <specDesc key="salute"/>
                     <specDesc key="signed"/>
                  </p>
                  <p>To encode a letter, first wrap the letter in a <gi>q</gi>, then a <gi>floatingText</gi> with an <att>type</att>=<val>letter</val>, and then a <gi>body</gi> element.
                  <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <q>
                           <floatingText type="letter">
                              <body>
                                <!--Content of the letter goes here-->
                              </body>
                           </floatingText>
                        </q>
                     </egXML>
                  
                  </p>
                  <p>Most often, letters will contain opening and closing matter; often this is a salute (a salutation) or some signature. These are tagged using the <gi>salute</gi> and <gi>signed</gi> elements, wrapped in <gi>opener</gi> and <gi>closer</gi> tags. An example to illustrate:
                     <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <q>
                           <floatingText type="letter">
                              <body>
                                 <opener>
                                    <salute>Darling Girlie:</salute>
                                 </opener>
                                 
                                 <p>I am counting the hours when I will be with you. I tried to get up
                                    to see you last night, but it was impossible. Lord Eaton’s son,
                                    young Albert, was on the steamer coming over, and they are friends
                                    of the governor’s and I simply had to be with them. You see,
                                    darling, it means a good deal to me in the future, to be in touch
                                    with these people. His brother-in-law, whom I met last night, is
                                    head cockalorum in the House of Parliament, and as I have often
                                    told you, my ambition is to get into politics. It’s the surest road
                                    to fame for a Barrister.</p>
                                 
                                 <p>Now I hope my foolish little girl will understand and believe me
                                    when I say that I am thinking for you as much as for myself.</p>
                                 
                                 <p>I am hungry for a kiss, and I feel I cannot wait till tonight.</p>
                                 
                                 <closer>
                                    <salute>Your own,</salute>
                                    <signed>Reggie.</signed>
                                 </closer>
                              </body>
                           </floatingText>
                        </q>
                     </egXML>
                     
                  </p>
                  <p>Note that occassionally the letter is interrupted by authorial/narrative commentary; we do not respect the quotation mark boundaries, but rather encode these interruptions as authorial notes. To tag these, use the <gi>note</gi> element with an <att>type</att>=<val>authorial</val>
                     <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <q>
                           <floatingText type="letter">
                              <body>
                                 <opener>
                                    <salute>Dear Miss Marion:</salute>
                                 </opener>
                                
                              
                              
                                 <p>Will you and your charming sister take a little drive with me and a
                                 friend this evening? If so, meet us at eight o’clock, corner of St.
                                 James and St. Denis streets. My friend has seen your sister in
                                 Judge Laflamme’s office <note type="authorial">(Ellen worked there)</note> and he is very
                                 anxious to know her. As for me, I am thinking only of when I shall
                                 see my lovely rose again. I am counting the hours!</p>
                              
                                 <closer>
                                    <salute>Devotedly,</salute>
                                    <signed>Fred Stevens.</signed>
                                 </closer>
                              </body>
                           
                           </floatingText>
                        </q>
                     
                     
                     </egXML>
                  
                  </p>
               </div>
               <div>
                  <head>Quotations across hierarchies</head>
                  <p>Particularly in novels, quotations will appear across hierarchies; that is, a quotation will start on one page, be interrupted by content on another page, and then continue on the following page. Take, for instance, this example from <title level="m">Marion</title>:
                 
                 
                 <code rend="block">
                    “It isn’t as if they are strangers, you know. One of them, Harry Bond, is my own fellow. You know who his folks are, and but for them we’d have been married long ago. Well, Harry’s friend, the one who wants to meet you, is a swell, too, and he hasn’t been out from England long. Harry says his folks are big nobs over there, and
                    
                    [Image unavailable.]
                    Someone had passed up to me over the footlights, if you please, a real bouquet of flowers.

                    he is studying law here. His folks send him a remittance and I guess it’s a pretty big one, for he’s living at the Windsor, and I guess he can treat us fine. So come along. You’ll not get such a chance again.”
                 </code>
                     
                     Here, the quotation properly starts at in the first paragraphic block and is then interrupted by an image insert between the pages, and then continues afterwards. To deal with this overlapping hierarchy, there are two steps we must take:
                     
                     <list>
                        <item>First, we must signal that the paragraph before the image inserts is the same paragraph as the one after</item>
                        <item>Second, we must signal that the continue continues across the page hierarchy, but does not include the image (of course, the image is not part of the quoted material).</item>
                     </list>
                  </p>
                  
                  <p>To signal the paragraphs continuation, we use the <att>part</att> attribute:
                  <specDesc key="p" atts="part"/>
                  We use the value <val>I</val> to signal the initial paragraph, <val>M</val> to signal any medial paragraphs, and <val>F</val> to signal the final paragraph.
                     <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <p part="I">It isn’t as if they are strangers, you know. One of them, Harry Bond,
                           is my own fellow. You know who his folks are, and but for them we’d have
                           been married long ago. Well, Harry’s friend, the one who wants to meet
                           you, is a swell, too, and he hasn’t been out from England long. Harry
                           says his folks are big nobs over there, and</p>
                        <pb n="48.1" xml:id="page_48.1"/>
                        <figure>
                           <graphic url="images/i_061_sml.jpg"/>
                           <p>Someone had passed up to me over the footlights, if you
                              please, a real bouquet of flowers.</p>
                        </figure>
                        
                        <pb n="49" xml:id="page_49"/>
                        <p part="F">he is studying law here. His folks send him a remittance and I guess
                           it’s a pretty big one, for he’s living at the Windsor, and I guess he
                           can treat us fine. So come along. You’ll not get such a chance again.</p>
                     </egXML>
                  </p>
                  
                  <p>To handle the overlapping quotations, we use a similar approach using the <att>next</att> and <att>prev</att> attributes to signal explicitly the sequence of quotation elements:
                  <specDesc key="q" atts="next prev"/>
                  </p>
                  <p>To do so, we must first give each <gi>q</gi> an <att>xml:id</att>; this can be whatever you want, but it usually makes most sense to prefix it with the file's name and use a sensible numbering system:
                     <egXML xmlns="http://www.tei-c.org/ns/Examples">
                            <q xml:id="Marion_q1">It isn’t as if they are strangers, you know. One of them, Harry Bond,
                        is my own fellow. You know who his folks are, and but for them we’d have
                        been married long ago. Well, Harry’s friend, the one who wants to meet
                        you, is a swell, too, and he hasn’t been out from England long. Harry
                        says his folks are big nobs over there, and</q>

                     </egXML>
                     
                     We do the same thing for the second quotation element, giving it an <att>xml:id</att>:
                     
                     <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <q xml:id="Marion_q2" prev="#Marion_q1">he is studying law here. His folks send him a remittance and I guess
                           it’s a pretty big one, for he’s living at the Windsor, and I guess he
                           can treat us fine. So come along. You’ll not get such a chance again</q>.
                     </egXML>
                     
                     We then use the <att>next</att> and <att>prev</att> attributes to point to each quotation in the sequence.
                     
                     <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <q xml:id="Marion_q1" next="#Marion_q2">It isn’t as if they are strangers, you know. One of them, Harry Bond,
                           is my own fellow. You know who his folks are, and but for them we’d have
                           been married long ago. Well, Harry’s friend, the one who wants to meet
                           you, is a swell, too, and he hasn’t been out from England long. Harry
                           says his folks are big nobs over there, and</q>
                        <!--Stuff-->
                       <q xml:id="Marion_q2" prev="#Marion_q1">he is studying law here. His folks send him a remittance and I guess
                           it’s a pretty big one, for he’s living at the Windsor, and I guess he
                           can treat us fine. So come along. You’ll not get such a chance again</q>.
                     </egXML>
                     
                     So, putting it all together:
                     
                     <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <p part="I">
                           <q xml:id="Marion_q1" next="#Marion_q2">It isn’t as if they are strangers, you know. One of them, Harry Bond,
                           is my own fellow. You know who his folks are, and but for them we’d have
                           been married long ago. Well, Harry’s friend, the one who wants to meet
                           you, is a swell, too, and he hasn’t been out from England long. Harry
                           says his folks are big nobs over there, and</q>
                        </p>
                        <pb n="48.1" xml:id="page_48.1"/>
                        <figure>
                           <graphic url="images/i_061_sml.jpg"/>
                           <p>Someone had passed up to me over the footlights, if you
                              please, a real bouquet of flowers.</p>
                        </figure>
                        
                        <pb n="49" xml:id="page_49"/>
                        <p part="F">
                           <q xml:id="Marion_q2" prev="#Marion_q1">he is studying law here. His folks send him a remittance and I guess
                           it’s a pretty big one, for he’s living at the Windsor, and I guess he
                           can treat us fine. So come along. You’ll not get such a chance again</q>.</p>
                     </egXML>
                  </p>
                  
                 
               </div>
            </div>
            <div xml:id="codeTemplates">
               <head>Code Templates (Shortcuts)</head>
               <p>The table below lists keyboard shortcuts for inserting common encoding features in a text. In most cases, the code template simply requires selecting (i.e. highlighting) the bit of text you want to encode and then typing in the keystroke; the exception currently is the gap element shortcut, which is simply inserted where your cursor is in the document.</p>
               
               <table>
                  <row>
                     <cell>M1</cell>
                     <cell>Command key on MacOS X, Ctrl on other platforms.</cell>
                  </row>
                  <row>
                     <cell>M2</cell>
                     <cell>Shift</cell>
                  </row>
                  <row>
                     <cell>M3</cell>
                     <cell>Option on Mac OS X, Alt on other platforms</cell>
                  </row>
               </table>
               <table xml:id="codeTemplates_table">
                  <row role="label">
                     <cell>Name</cell>
                     <cell>Description</cell>
                     <cell>Result</cell>
                     <cell>Keystroke</cell>
                  </row>
                  <row>
                     <cell>Insert left quotation mark</cell>
                     <cell>Insert the the opening curly quotation mark</cell>
                     <cell>
                        <code>“</code>
                     </cell>
                     <cell>M1 M2 L</cell>
                  </row>
                  <row>
                     <cell>Insert left single quote</cell>
                     <cell>Inserts the opening single curly apostrophe</cell>
                     <cell>
                        <code>‘</code>
                     </cell>
                     <cell>M1 M2 A</cell>
                  </row>
                  <row>
                     <cell>Insert right curly quote</cell>
                     <cell>Inserts the closing curly quotation mark</cell>
                     <cell>
                        <code>”</code>
                     </cell>
                     <cell>M1 M2 R</cell>
                  </row>
                  <row>
                     <cell>Tag foreign</cell>
                     <cell>Tag a foreign selection</cell>
                     <cell>
                        <code>&lt;foreign&gt;${selection}&lt;/foreign&gt;</code>
                     </cell>
                     <cell>M1 M2 F</cell>
                  </row>
                  <row>
                     <cell>Tag gap</cell>
                     <cell>Insert a gap element</cell>
                     <cell>
                        <code>&lt;gap reason="${caret}"/&gt;</code>
                     </cell>
                     <cell>M1 M2 G</cell>
                  </row>
                  <row>
                     <cell>Tag paragraph</cell>
                     <cell>Tag a paragraph</cell>
                     <cell>
                        <code>&lt;p&gt;${selection}&lt;/p&gt;</code>
                     </cell>
                     <cell>M1 M2 P</cell>
                  </row>
                  <row>
                     <cell>Tag Winnifred Eaton's name</cell>
                     <cell>Tag a reference to Winnifred Eaton</cell>
                     <cell>
                        <code>&lt;name ref="pers:WE1"&gt;${selection}&lt;/name&gt;</code>
                     </cell>
                     <cell>M1 M2 W</cell>
                  </row>
               </table>
               
            </div>
         </div>
         <div>
            <head>Building the Schema</head>
            <p>All constraints and documentation are contained within the ODD file, including the RelaxNG schema, the schematron file, and the compiled schematron XSLT.</p>
            <p>To regenerate the schema and the documentation follow these directions</p>
            <p>
               <emph>In oXygen</emph>: Simply open the ODD file in the oXygen project file and press the red "play" button.</p>
            <p>
               <emph>Command line</emph>: in the root project directory (<code>wea_data</code>), run:
               <code rend="block">ant -lib lib -f code/buildSchemas.xml</code>
               Note that you must have ant installed.
            </p>
         </div>

      </body>
      <back>
         <div>
            <schemaSpec ident="wea" start="TEI">
               <moduleRef key="analysis" include="pc"/>
          
               <moduleRef key="core"
                          include="author bibl choice corr date divGen editor emph foreign gap graphic head hi item l lg list listBibl milestone name note num orig p pb pubPlace publisher q quote ref reg relatedItem resp respStmt sic term title unclear"/>
               <moduleRef key="header"
                          include="abstract authority availability biblFull catRef catDesc category change classDecl correction creation distributor edition editorialDecl encodingDesc fileDesc hyphenation idno interpretation langUsage language licence listChange listPrefixDef normalization prefixDef profileDesc projectDesc publicationStmt punctuation quotation rendition revisionDesc sourceDesc taxonomy teiHeader textClass titleStmt"/>
               
               <moduleRef key="figures" include="cell figDesc figure table row"/>
               
               <moduleRef key="linking" include="ab seg anchor"/>
               <moduleRef key="namesdates"
                          include="birth death event forename listEvent listOrg listPerson listPlace listRelation location nationality occupation orgName persName person place placeName surname"/>
               <moduleRef key="tagdocs" include="att code gi val"/>
               <!--Include all TEI modules-->
               <moduleRef key="tei"/>
          
               <moduleRef key="textstructure"
                          include="TEI back body byline closer dateline div docAuthor docDate docTitle epigraph floatingText front opener text titlePage titlePart trailer salute signed"/>
          
               <moduleRef key="transcr" include="supplied"/>
          
               <!--MODULE: HEADER-->
          
               <elementSpec ident="teiHeader" module="header" mode="change">
            <!--Make all the bits we want of the teiHeader mandatory-->
                  <content>
                     <elementRef key="fileDesc"/>
                     <elementRef key="profileDesc"/>
                     <!--Make encodingDesc optional-->
                     <elementRef key="encodingDesc" minOccurs="0" maxOccurs="1"/>
                     <elementRef key="revisionDesc"/>
                  </content>
               </elementSpec>
          
               <!--Make profileDesc/textClass mandatory-->
               <elementSpec ident="profileDesc" module="header" mode="change">
                  <content>
                     <elementRef key="textClass"/>
                  </content>
               </elementSpec>
          
               <!--And make at least one catRef mandatory-->
               <elementSpec ident="textClass" module="header" mode="change">
                  <content>
                     <elementRef key="catRef" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
                  <constraintSpec scheme="schematron" ident="textClass.oneofEach">
                     <desc>An XSLT restraint for one of each catRef</desc>
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:textClass">
                              <sch:assert test="tei:catRef[@scheme='wdt:docType']">
                            ERROR: Missing category reference docType.
                        </sch:assert>
                           </sch:rule>
                           <sch:rule context="tei:textClass">
                              <sch:assert test="tei:catRef[@scheme='wdt:genre']">
                            ERROR: Missing category reference genre.
                        </sch:assert>
                           </sch:rule>
                           <sch:rule context="tei:textClass">
                              <sch:assert test="tei:catRef[@scheme='wdt:category']">
                            ERROR: Missing category reference category.
                        </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
    
               </elementSpec>
          
               <elementSpec ident="catRef" module="header" mode="change">

                  <constraintSpec scheme="schematron" ident="catRef.occurence">
                     <desc>An XsLT generated co-occurence constraint</desc>
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:catRef[@scheme='wdt:docType']">
                              <sch:assert test="matches(@target,'^((wdt:docPrimarySource)|(wdt:docPrimarySourceMS)|(wdt:docPrimarySourcePublished)|(wdt:docBornDigital)|(wdt:docBornDigitalCategory))$')">
                            ERROR: Value <sch:value-of select="@target"/> not allowed for category reference <sch:value-of select="@scheme"/>
                              </sch:assert>
                           </sch:rule>
                           <sch:rule context="tei:catRef[@scheme='wdt:genre']">
                              <sch:assert test="matches(@target,'^((wdt:genreShortStory)|(wdt:genreNF)|(wdt:genreNFAuto)|(wdt:genreNFDedication)|(wdt:genreNFInterview)|(wdt:genreNFIntroduction)|(wdt:genreNFEthnography)|(wdt:genreFilm)|(wdt:genreFilmScenario)|(wdt:genreFilmTreatment)|(wdt:genrePoem)|(wdt:genreNovel)|(wdt:genreNovelSerial))$')">
                            ERROR: Value <sch:value-of select="@target"/> not allowed for category reference <sch:value-of select="@scheme"/>
                              </sch:assert>
                           </sch:rule>
                           <sch:rule context="tei:catRef[@scheme='wdt:category']">
                              <sch:assert test="matches(@target,'^((wdt:Japan)|(wdt:Alberta)|(wdt:Hollywood)|(wdt:EarlyExperiment)|(wdt:NewYork))$')">
                            ERROR: Value <sch:value-of select="@target"/> not allowed for category reference <sch:value-of select="@scheme"/>
                              </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                     
                  </constraintSpec>
                  <attList>
                     <attDef ident="cert" mode="delete"/>
                     <attDef ident="change" mode="delete"/>
                     <attDef ident="facs" mode="delete"/>
                     <attDef ident="rend" mode="delete"/>
                     <attDef ident="source" mode="delete"/>
                     <attDef ident="xml:id" mode="delete"/>
                     <attDef ident="xml:lang" mode="delete"/>
                     <attDef ident="corresp" mode="delete"/>
                     <attDef ident="n" mode="delete"/>
                     <attDef ident="rendition" mode="delete"/>
                     <attDef ident="resp" mode="delete"/>
                     <attDef ident="style" mode="delete"/>
                     <!--Auto generated values-->
                     <attDef ident="scheme" mode="change" usage="req">
                        <valList mode="add" type="closed">
                           <valItem mode="add" ident="wdt:docType">
                              <desc>Document Type</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genre">
                              <desc>Genre</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:category">
                              <desc>Locations</desc>
                           </valItem>
                        </valList>
                     </attDef>
                     <attDef ident="target" mode="change" usage="req">
                        <valList mode="add" type="closed">
                           <valItem mode="add" ident="wdt:docPrimarySource">
                              <desc>Primary Source</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:docPrimarySourceMS">
                              <desc>Primary Source in Manuscript</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:docPrimarySourcePublished">
                              <desc>Published Primary Source</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:docBornDigital">
                              <desc>Born Digital document</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:docBornDigitalCategory">
                              <desc>Generated category page.</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreShortStory">
                              <desc>Short Story</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreNF">
                              <desc>Non-fiction</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreNFAuto">
                              <desc>Non-fiction: Autobiography</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreNFDedication">
                              <desc>Non-fiction: Dedication</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreNFInterview">
                              <desc>Non-Fiction: Interview</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreNFIntroduction">
                              <desc>Non-fiction: Introduction</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreNFEthnography">
                              <desc>Non-fiction: Ethnography</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreFilm">
                              <desc>Film</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreFilmScenario">
                              <desc>Film: Scenario</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreFilmTreatment">
                              <desc>Film: Treatment</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genrePoem">
                              <desc>Poem</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreNovel">
                              <desc>Novel</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:genreNovelSerial">
                              <desc>Novel: Serial</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:Japan">
                              <desc>Japan</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:Alberta">
                              <desc>Alberta</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:Hollywood">
                              <desc>Hollywood</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:EarlyExperiment">
                              <desc>Early Experiments</desc>
                           </valItem>
                           <valItem mode="add" ident="wdt:NewYork">
                              <desc>New York</desc>
                           </valItem>
                        </valList>
                     </attDef>
                     
                  </attList>
                  
               </elementSpec>
         
          
               <elementSpec mode="change" module="header" ident="sourceDesc">
                  <content>
                     <alternate>
                        <elementRef key="p"/>
                        <elementRef key="bibl"/>
                     </alternate>
                  </content>
                  <constraintSpec ident="useBiblInPS" scheme="schematron">
                     <desc>All primary sources must use a <gi>bibl</gi> element in the <gi>sourceDesc</gi>
                     </desc>
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:sourceDesc[not(tei:bibl)]">
                              <sch:assert test="some $d in $docTypes satisfies matches($d, 'BornDigital')">
                      ERROR: All not born digital documents must use a &lt;bibl&gt; element in their
                      source descriptions.
                    </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               
               <elementSpec ident="name" module="core" mode="change">
                  <attList>
                     <attDef ident="ref" mode="add">
                        <valList mode="add" type="closed">
                           <valItem mode="add" ident="pers:WE1">
                              <desc>WE1</desc>
                              <gloss>Winnifred Eaton</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:SE1">
                              <desc>SE1</desc>
                              <gloss>S. Ehrhart</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:AB1">
                              <desc>AB1</desc>
                              <gloss>Albert Blashfield</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:MC1">
                              <desc>MC1</desc>
                              <gloss>Mary Chapman</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:JLC1">
                              <desc>JLC1</desc>
                              <gloss>Jean Lee Cole</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:SL1">
                              <desc>SL1</desc>
                              <gloss>Sydney Lines</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:KI1">
                              <desc>KI1</desc>
                              <gloss>Ken Ip</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:JT1">
                              <desc>JT1</desc>
                              <gloss>Joey Takeda</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:SP1">
                              <desc>SP1</desc>
                              <gloss>Serina Patterson</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:HB1">
                              <desc>HB1</desc>
                              <gloss>Hilary Ball</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:XY1">
                              <desc>XY1</desc>
                              <gloss>Xine Yao</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:PP1">
                              <desc>PP1</desc>
                              <gloss>Pavlina Pajot</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:LM1">
                              <desc>LM1</desc>
                              <gloss>Lucia Maggio</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               
               <!--Modify persName so that we need at least one of reg, forename, and surname-->
               <elementSpec ident="persName" module="namesdates" mode="change">
                  <content>
                     <elementRef key="reg" minOccurs="1" maxOccurs="1"/>
                     <elementRef key="forename" minOccurs="1" maxOccurs="unbounded"/>
                     <elementRef key="surname" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
               </elementSpec>
               
               <!--CORE-->
               
               <elementSpec ident="note" module="core" mode="change">
                  <constraintSpec scheme="schematron" ident="note.authorialInQOnly">
                     <desc>Use authorial notes only within <gi>q</gi> elements</desc>
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:note[@type='authorial']">
                              <sch:assert test="ancestor::tei:q">
                                 ERROR: Authorial notes should only be used within the q element.
                              </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
                  <constraintSpec scheme="schematron" ident="note.useAuthorialOrEditorialInQ">
                     <desc>All notes within the <gi>q</gi> element should have a type.</desc>
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:note[ancestor::tei:q]">
                              <sch:assert test="@type">
                                 ERROR: Notes within the q element should have a type of either authorial
                                 or editorial.
                              </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
                  <constraintSpec scheme="schematron" ident="note.editorialShouldHaveResp">
                     <desc>Editorial notes should always have an <att>resp</att>.</desc>
                     <constraint>
                        <sch:pattern>
                           <sch:rule context="tei:note[@type='editorial']">
                              <sch:assert test="@resp">
                                 ERROR: Editorial notes should have a @resp attribute pointing to the person who authored this note.
                              </sch:assert>
                           </sch:rule>
                        </sch:pattern>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <attDef ident="type" mode="replace">
                        <valList mode="add" type="closed">
                           <valItem ident="editorial" mode="add">
                              <desc>editorial</desc>
                              <gloss>an editorial note (i.e. supplied by an editor)</gloss>
                           </valItem>
                           <valItem ident="authorial" mode="add">
                              <desc>authorial</desc>
                              <gloss>an authorial note; currently only used with quotations where the author
                                 interrupts the dominant narrative voice by interjecting explanatory commentary.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
                  
               </elementSpec>
               
               
               <!--CLASS SPECS-->
               <!--
               <classSpec type="atts" module="tei" ident="att.canonical" mode="change">
                  <attList>
                     <attDef ident="key" mode="delete"/>
                  </attList>
               </classSpec>-->
               <classSpec ident="att.ranging" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.written" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.cReferencing" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.datable" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="period" mode="delete"/>
                  </attList>
               </classSpec>
               <classSpec ident="att.datcat" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.declarable" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.declaring" module="tei" type="atts" mode="delete"/>
               <!--WE need this for rhyme-->
               <classSpec ident="att.divLike" module="tei" type="atts" mode="delete"/>               
               <classSpec ident="att.docStatus" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="status" mode="change">
                        <valList mode="add" type="open">
                           <valItem ident="draft" mode="add">
                              <gloss>This document is currently being edited. It is not ready for
                                 publication or peer-review.</gloss>
                           </valItem>
                           <valItem ident="published" mode="add">
                              <gloss>This document is ready to be published.</gloss>
                           </valItem>
                           <valItem ident="deprecated" mode="add">
                              <gloss>This document is no longer relevant, but is being preserved for
                                 archival purposes.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec ident="att.global.responsibility"
                          module="tei"
                          type="atts"
                          mode="change">
                  <attList>
                     <attDef ident="resp" mode="change">
                        <valList mode="add" type="closed">
                           <valItem mode="add" ident="pers:WE1">
                              <desc>WE1</desc>
                              <gloss>Winnifred Eaton</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:SE1">
                              <desc>SE1</desc>
                              <gloss>S. Ehrhart</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:AB1">
                              <desc>AB1</desc>
                              <gloss>Albert Blashfield</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:MC1">
                              <desc>MC1</desc>
                              <gloss>Mary Chapman</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:JLC1">
                              <desc>JLC1</desc>
                              <gloss>Jean Lee Cole</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:SL1">
                              <desc>SL1</desc>
                              <gloss>Sydney Lines</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:KI1">
                              <desc>KI1</desc>
                              <gloss>Ken Ip</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:JT1">
                              <desc>JT1</desc>
                              <gloss>Joey Takeda</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:SP1">
                              <desc>SP1</desc>
                              <gloss>Serina Patterson</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:HB1">
                              <desc>HB1</desc>
                              <gloss>Hilary Ball</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:XY1">
                              <desc>XY1</desc>
                              <gloss>Xine Yao</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:PP1">
                              <desc>PP1</desc>
                              <gloss>Pavlina Pajot</gloss>
                           </valItem>
                           <valItem mode="add" ident="pers:LM1">
                              <desc>LM1</desc>
                              <gloss>Lucia Maggio</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec ident="att.duration.w3c" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.duration.iso" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.editLike" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.global" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="xml:base" mode="delete"/>
                     <attDef ident="xml:space" mode="delete"/>
                  </attList>
               </classSpec>
               <classSpec ident="att.global.facs" module="tei" type="atts" mode="change">
                  <constraintSpec scheme="schematron" ident="facs.mustStartWithFacs">
                     <desc>All <att>facs</att> attributes should start with facs</desc>
                     <constraint>
                        <sch:rule context="tei:*[@facs]">
                           <sch:let name="tokens" value="tokenize(@facs,'\s+')"/>
                           <sch:let name="facsRegex" value="'^facs:.+'"/>
                           <sch:assert test="every $t in $tokens satisfies (matches($t,$facsRegex) and not(matches($t,'\..+$')))">
                              ERROR: All facsimile pointers should start with facs: and not include the file extension.
                           </sch:assert>
                        </sch:rule>
                     </constraint>
                  </constraintSpec>
               </classSpec>
               <classSpec ident="att.global.rendition"
                          module="tei"
                          type="atts"
                          mode="change">
                  <attList>
                     <attDef ident="rend" mode="delete"/>
                  </attList>
               </classSpec>
               <classSpec ident="att.global.linking"
                          module="linking"
                          type="atts"
                          mode="change">
                  <attList>
                     <attDef ident="corresp" mode="delete"/>
                     <attDef ident="synch" mode="delete"/>
                     <attDef ident="copyOf" mode="delete"/>
                     <attDef ident="sameAs" mode="delete"/>
                     <attDef ident="select" mode="delete"/>
                     <attDef ident="exclude" mode="delete"/>
                  </attList>
               </classSpec>
               <classSpec ident="att.handFeatures" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.interpLike" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.measurement" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.naming" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.notation" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.pointing" module="tei" type="atts" mode="change">
                  <attList>
                     <attDef ident="targetLang" mode="delete"/>
                     <attDef ident="evaluate" mode="delete"/>
                  </attList>
               </classSpec>
               <classSpec ident="att.pointingGroup"
                          module="tei"
                          type="atts"
                          mode="delete"/>
               <classSpec ident="att.scoping" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.segLike" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.sortable" module="tei" type="atts" mode="delete"/>
                <classSpec ident="att.edition" module="tei" type="atts" mode="delete"/>
               <classSpec ident="att.readFrom" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.spanning" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.repeatable" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.timed" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.transcriptional"
                          type="atts"
                          module="tei"
                          mode="delete"/>
               <classSpec ident="att.translatable" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.citing" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.partials" type="atts" module="tei" mode="delete"/>
               <classSpec ident="att.personal" type="atts" module="tei" mode="change">
                  <attList>
                     <attDef ident="full" mode="delete"/>
                     <attDef ident="sort" mode="delete"/>
                  </attList>
               </classSpec>
               
               
               <classSpec ident="att.global.analytic"
                          type="atts"
                          module="tei"
                          mode="delete"/>
               <classSpec ident="att.pointing.group"
                          type="atts"
                          module="tei"
                          mode="delete"/>
               
               <!--CONSTRAINTS-->
          
               <constraintSpec ident="global" scheme="schematron">
                  <constraint>
              
                     <sch:pattern>
                        <sch:let name="spaceRegex" value="'(^\s)|(\s$)'"/>
                        <sch:let name="docId" value="root(/)/tei:*/@xml:id"/>
                        <sch:let name="docUri" value="document-uri(/)"/>
                        <sch:let name="docIds" value="//tei:*[@xml:id]/@xml:id"/>
                        <sch:let name="docTypes" value="//tei:catRef/@target"/>
                        <sch:let name="docStatus" value="//tei:revisionDesc/@status"/>
                        
                        <sqf:fix id="globals">
                           <sqf:description>
                              <sqf:title>Global Templates</sqf:title>
                           </sqf:description>
                           
                           <!--GLOBAL XSL VARIABLES-->
                           <xsl:variable name="apos">'</xsl:variable>
                           <xsl:variable name="dq">"</xsl:variable>
                              <!--TAG BLOCKS TEMPLATE-->
                              <xsl:template name="tagBlocks">
                                 <xsl:param name="verse" select="false()"/>
                                 <xsl:variable name="ancestors" select="count(ancestor::tei:*)"/>
                                 <xsl:variable name="tabCount" select="$ancestors"/>
                                 <xsl:variable name="newLine">
                                    <xsl:text>
</xsl:text>
                                 </xsl:variable>
                                 <xsl:variable name="tab"
                                            select="string-join(for $n in (2 to $tabCount) return '&#x9;','')"/>
                                 <xsl:variable name="paras"
                                            select="for $t in tokenize(.,'\n+') return normalize-space($t)"/>
                                 <xsl:for-each select="$paras[not(.='')]">
                                    <xsl:value-of select="$newLine"/>
                                    <xsl:value-of select="$tab"/>
                                    <xsl:element name="{if ($verse) then 'l' else 'p'}">
                                       <xsl:value-of select="."/>
                                    </xsl:element>
                                 </xsl:for-each>
                              </xsl:template>
                           
                           <xsl:template name="replaceApos">
                              <xsl:param name="useDq" select="false()"/>
                              <xsl:variable name="thisApos" select="if ($useDq) then $dq else $apos"/>
                              <xsl:variable name="left" select="if ($useDq) then '“' else '‘'"/>
                              <xsl:variable name="right" select="if ($useDq) then '”' else '’'"/>
                              <xsl:analyze-string select="." regex="{concat('(^|\s+)',$thisApos)}">
                                 <xsl:matching-substring>
                                    <xsl:value-of select="regex-group(1)"/>
                                    <xsl:value-of select="$left"/>
                                 </xsl:matching-substring>
                                 <xsl:non-matching-substring>
                                    <xsl:analyze-string select="." regex="{concat('([a-zA-Z])',$thisApos)}">
                                       <xsl:matching-substring>
                                          <xsl:value-of select="regex-group(1)"/>
                                          <xsl:value-of select="$right"/>
                                       </xsl:matching-substring>
                                       <xsl:non-matching-substring>
                                          <xsl:analyze-string select="." regex="{concat($thisApos,'(\s+|$)')}">
                                             <xsl:matching-substring>
                                                <xsl:value-of select="$right"/>
                                                <xsl:value-of select="regex-group(1)"/>
                                             </xsl:matching-substring>
                                             <xsl:non-matching-substring>
                                                <xsl:value-of select="."/>
                                             </xsl:non-matching-substring>
                                          </xsl:analyze-string>
                                       </xsl:non-matching-substring>
                                    </xsl:analyze-string>
                                 </xsl:non-matching-substring>
                              </xsl:analyze-string>
                           </xsl:template>
                           
                           
                           <xsl:template name="tagQuote">
                              <xsl:param name="left"/>
                              <xsl:param name="right"/>
                              <xsl:variable name="rex1" select="concat($left,'([^',$right,']+)([\.,])',$right)"/>
                              <xsl:variable name="rex2" select="concat($left,'([^',$right,']+)',$right)"/>
                              <xsl:analyze-string select="." regex="{$rex1}">
                                 <xsl:matching-substring>
                                    <xsl:element name="q">
                                       <xsl:value-of select="regex-group(1)"/>
                                    </xsl:element>
                                    <xsl:value-of select="regex-group(2)"/>
                                 </xsl:matching-substring>
                                 <xsl:non-matching-substring>
                                    <xsl:analyze-string select="." regex="{$rex2}">
                                       <xsl:matching-substring>
                                          <xsl:element name="q">
                                             <xsl:value-of select="regex-group(1)"/>
                                          </xsl:element>
                                       </xsl:matching-substring>
                                       <xsl:non-matching-substring>
                                          <xsl:value-of select="."/>
                                       </xsl:non-matching-substring>
                                    </xsl:analyze-string>
                                 </xsl:non-matching-substring>
                              </xsl:analyze-string>
                           </xsl:template>
                        </sqf:fix>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
          
               <!--Basic constraints-->
               <constraintSpec scheme="schematron" ident="TEI.docNameSameAsId">
                  <desc>All root elements must have an <att>xml:id</att> that matches the document filename.</desc>
                  <constraint>
                     <sch:pattern>
                        <sch:rule context="/tei:TEI[not(ancestor::tei:teiCorpus)] | /tei:teiCorpus">
                           <sch:assert test="@xml:id and matches($docUri,concat('[/\\]',$docId,'.xm[l_]$'))"> ERROR: Document
                    xml:id (<sch:value-of select="$docId"/>) does not match the document file
                    name (<sch:value-of select="$docUri"/>). </sch:assert>
                        </sch:rule>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               
               
               

               <constraintSpec scheme="schematron" ident="misMatchedQuote">
                  <constraint>
                     <sch:pattern>
                        <sch:rule context="tei:*[not(ancestor-or-self::tei:code)][text()]">
                           <sch:let name="onlyOneQuote"
                                    value="some $t in text() satisfies (not(count(tokenize($t,'”')) = count(tokenize($t,'“'))))"/>
                           <sch:assert test="not($onlyOneQuote)">
                              ERROR: Curly quotes that cannot be QuickFixed. Either add the curly quotation mark or change to the q element.
                           </sch:assert>
                        </sch:rule>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               
               
             
               <constraintSpec scheme="schematron" ident="noSpaceInRefs">
                  <constraint>
                     <sch:pattern>
                        <sch:rule context="tei:name | tei:ref | tei:title | tei:l">
                           <sch:let name="text" value="string-join(descendant::text(),'')"/>
                           <sch:assert test="not(matches($text,'^\s+|\s+$'))">
                              ERROR: <sch:name/> should not begin or end with spaces.
                           </sch:assert>
                        </sch:rule>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               
               <constraintSpec scheme="schematron" ident="noTrailingPeriod.warning">
                  <constraint>
                     <sch:pattern>
                        <sch:rule context="tei:name">
                           <sch:let name="text" value="string-join(descendant::text(),'')"/>
                           <sch:assert test="not(matches($text,'\.$'))" role="warning">
                              WARNING: <sch:name/> usually shouldn't end with periods.
                           </sch:assert>
                        </sch:rule>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               
               <constraintSpec scheme="schematron" ident="noTrailingPunct">
                  <constraint>
                     <sch:pattern>
                        <sch:rule context="tei:q">
                           <sch:let name="text" value="string-join(descendant::text(),'')"/>
                           <sch:assert test="not(matches($text,'[\.,]$'))">
                              ERROR: Trailing punctuaton should go outside the <sch:name/> element.
                           </sch:assert>
                        </sch:rule>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               
               
               
               <!--CONSTRAINTS WITH QUICK FIXES-->
               
               <constraintSpec scheme="schematron" ident="noStraightQuote">
                  <constraint>
                     <sch:pattern>
                        <sch:rule context="tei:body | tei:*[text()][normalize-space(string-join(text(),'')) ne '']">
                           <sch:let name="thisText"
                                    value="if (self::tei:body) then string-join(descendant::text(),'') else string-join(text(),'')"/>
                           <sch:let name="cp" value="string-to-codepoints($thisText)"/>
                           <sch:let name="distinctCp" value="distinct-values($cp)"/>
                           <sch:assert test="empty($distinctCp[.=34])"
                                       sqf:fix="replaceStraightQuotesHere replaceStraightQuotesEverywhere">
                              ERROR: QUICKFIX: Do not use straight quotation marks.
                           </sch:assert>
                           <sqf:fix id="replaceStraightQuotesHere" use-when="self::tei:body">
                              <sqf:description>
                                 <sqf:title>GLOBAL: Replace straight quotation mark with curly question marks everywhere.</sqf:title>
                              </sqf:description>
                              <sqf:replace match="//text()">
                                 <xsl:call-template name="replaceApos">
                                    <xsl:with-param name="useDq" select="true()"/>
                                 </xsl:call-template>
                              </sqf:replace>
                           </sqf:fix>
                           <sqf:fix id="replaceStraightQuotesEverywhere" use-when="not(self::tei:body)">
                              <sqf:description>
                                 <sqf:title>LOCAL: Replace straight quotation marks with curly quotation marks in this <sch:name/> element.</sqf:title>
                              </sqf:description>
                              <sqf:replace match="text()">
                                 <xsl:call-template name="replaceApos">
                                    <xsl:with-param name="useDq" select="true()"/>
                                 </xsl:call-template>
                              </sqf:replace>
                           </sqf:fix>
                        </sch:rule>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               
               <constraintSpec scheme="schematron" ident="noStraightApos">
                  <constraint>
                     <sch:pattern>
                        <sch:rule context="tei:body | tei:*[text()][normalize-space(string-join(text(),'')) ne '']">
                           <sch:let name="thisText"
                                    value="if (self::tei:body) then string-join(descendant::text(),'') else string-join(text(),'')"/>
                           <sch:let name="cp" value="string-to-codepoints($thisText)"/>
                           <sch:let name="distinctCp" value="distinct-values($cp)"/>
                           <sch:assert test="empty($distinctCp[.=39])"
                                       sqf:fix="replaceAposHere replaceAposEverywhere">
                              ERROR: QUICKFIX: Do not use straight apostrophes. 
                           </sch:assert>
                           <sqf:fix id="replaceAposHere" use-when="self::tei:body">
                              <sqf:description>
                                 <sqf:title>GLOBAL: Replace straight apostrophe with curly apostrophe everywhere.</sqf:title>
                              </sqf:description>
                              <sqf:replace match="//text()">
                                 <xsl:call-template name="replaceApos"/>
                              </sqf:replace>
                           </sqf:fix>
                           <sqf:fix id="replaceAposEverywhere" use-when="not(self::tei:body)">
                              <sqf:description>
                                 <sqf:title>LOCAL: Replace straight apostrophe with curly apostrophe in this <sch:name/> element.</sqf:title>
                              </sqf:description>
                              <sqf:replace match="text()">
                                 <xsl:call-template name="replaceApos"/>
                              </sqf:replace>
                           </sqf:fix>
                        </sch:rule>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               
               <constraintSpec scheme="schematron" ident="bodyDivsNeedParas">
                  <constraint>
                     <sch:pattern>
                        <sch:rule context="tei:body | tei:div | tei:lg">
                           <sch:let name="divs"
                                    value="if (self::tei:body) then (descendant::tei:div) else ."/>
                           <sch:let name="noElContentDivs" value="$divs[not(descendant::*)]"/>
                           <sch:let name="contentDivs"
                                    value="$noElContentDivs[not(normalize-space(string-join(text(),''))='')]"/>
                           <sch:assert test="empty($contentDivs)" sqf:fix="fixDivsHere fixDivsEverywhere">
                              ERROR: QUICKFIX: Untagged text should likely be tagged. Use the Quickfix to do so.
                           </sch:assert>
                           <sqf:fixes>
                              
                              <sqf:fix id="fixDivsHere" use-when="not(self::tei:body)">
                                 <sqf:description>
                                    <sqf:title>LOCAL: Fix this <sch:name/>
                                    </sqf:title>
                                 </sqf:description>
                                 <sqf:replace match="node()">
                                    <xsl:call-template name="tagBlocks">
                                       <xsl:with-param name="verse"
                                                       select="if (parent::*/self::tei:lg) then true() else false()"/>
                                    </xsl:call-template>
                                 </sqf:replace>
                              </sqf:fix>
                              
                              <sqf:fix id="fixDivsEverywhere" use-when="self::tei:body">
                                 <sqf:description>
                                    <sqf:title>GLOBAL: Tag all paragraphs within divs and lines within linegroups.</sqf:title>
                                 </sqf:description>
                                 <sqf:replace match="//tei:div[not(descendant::*)][not(normalize-space(string-join(text(),''))='')]/node() | //tei:lg[not(descendant::*)][not(normalize-space(string-join(text(),''))='')]/node()">
                                    <xsl:call-template name="tagBlocks">
                                       <xsl:with-param name="verse"
                                                       select="if (parent::*/self::tei:lg) then true() else false()"/>
                                    </xsl:call-template>
                                 </sqf:replace>
                              </sqf:fix>
                              
                              
                           </sqf:fixes>
                        </sch:rule>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               
               
               
               <constraintSpec scheme="schematron" ident="bodyQuotesShouldBeTagged">
                  <constraint>
                     <sch:pattern>
                        <sch:rule context="tei:body | tei:*[text()][not(normalize-space(string-join(text(),''))='')]">
                           <sch:let name="text" value="string-join(descendant::text(),'')"/>
                           <sch:let name="containsCurlyQuotes"
                                    value="matches($text,'“') and matches($text,'”')"/>
                           <sch:assert test="not($containsCurlyQuotes)"
                                       sqf:fix="fixQuotesHere fixQuotesEverywhere">
                              ERROR: QUICKFIX: Do not use curly quotes; use the q element instead.
                           </sch:assert>
                           <sqf:fix id="fixQuotesHere">
                              <sqf:description>
                                 <sqf:title>
                                    LOCAL: Replace curly quotes with q elements in this <sch:name/> element.</sqf:title>
                              </sqf:description>
                              <sqf:replace match="text()[contains(.,'“') and contains(.,'”')]">
                                 <xsl:call-template name="tagQuote">
                                    <xsl:with-param name="left" select="'“'"/>
                                    <xsl:with-param name="right" select="'”'"/>
                                 </xsl:call-template>
                              </sqf:replace>
                           </sqf:fix>         
                           <sqf:fix id="fixQuotesEverywhere" use-when="self::tei:body">
                              <sqf:description>
                                 <sqf:title>GLOBAL: Replace curly quotes with q elements.</sqf:title>
                              </sqf:description>
                              <sqf:replace match="//text()[contains(.,'“') and contains(.,'”')]">
                                 <xsl:call-template name="tagQuote">
                                    <xsl:with-param name="left" select="'“'"/>
                                    <xsl:with-param name="right" select="'”'"/>
                                 </xsl:call-template>
                              </sqf:replace>
                           </sqf:fix>
                        </sch:rule>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               
              
               
            </schemaSpec>
         </div>
         
        
     
      </back>
  </text>
</TEI>
